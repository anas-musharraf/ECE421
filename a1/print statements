weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
print(weight)
print(bias)
print(training_loss)
print(validation_loss)
print(test_loss)
iterations = range(len(training_loss))
plt.figure(1)
plt.plot(iterations, training_loss)

plt.plot(iterations, validation_loss)

plt.plot(iterations, test_loss)
plt.savefig('loss_vs_epoch_.png')
plt.figure(2)
plt.plot(iterations, training_accuracy)
plt.plot(iterations, validation_accuracy)
plt.plot(iterations, test_accuracy)


weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_loss))
plt.plot(iterations, training_loss, label = 'alpha = 0.005')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_loss))
plt.plot(iterations, training_loss, label = 'alpha = 0.001')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.0001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_loss))
plt.plot(iterations, training_loss, label = 'alpha = 0.0001')
plt.ylabel('Training Loss')
plt.xlabel('Epoch')
plt.title('Training loss of a Linear Regression Model vs Number of Ephochs')
plt.legend()
plt.savefig('loss_vs_epoch_.png')
plt.show()



weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_loss))
plt.plot(iterations, validation_loss, label = 'alpha = 0.005')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_loss))
plt.plot(iterations, validation_loss, label = 'alpha = 0.001')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.0001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_loss))
plt.plot(iterations, validation_loss, label = 'alpha = 0.0001')
plt.ylabel('Validation Loss')
plt.xlabel('Epoch')
plt.title('Validation Loss of a Linear Regression Model vs Number of Ephochs')
plt.legend()
plt.savefig('vloss_vs_epoch_.png')
plt.show()



weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(test_loss))
plt.plot(iterations, test_loss, label = 'alpha = 0.005')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(test_loss))
plt.plot(iterations, test_loss, label = 'alpha = 0.001')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.0001, 5000, 0, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(test_loss))
plt.plot(iterations, test_loss, label = 'alpha = 0.0001')
plt.ylabel('Test Loss')
plt.xlabel('Epoch')
plt.title('Test Loss of a Linear Regression Model vs Number of Ephochs')
plt.legend()
plt.savefig('testLoss_vs_epoch_.png')
plt.show()


weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.001, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_accuracy))
plt.plot(iterations, training_accuracy, label = 'Regularization Parameter  = 0.001')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.1, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_accuracy))
plt.plot(iterations, training_accuracy, label = 'Regularization Parameter  = 0.1')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.5, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(training_accuracy))
plt.plot(iterations, training_accuracy, label = 'Regularization Parameter  = 0.5')
plt.ylabel('Training Accuracy')
plt.xlabel('Epoch')
plt.title('Training Accuracy of a Linear Regression Model vs Number of Ephochs')
plt.legend(loc='best')
plt.savefig('trainingAcc_vs_epoch_.png')
plt.show()



weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.001, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_accuracy))
plt.plot(iterations, validation_accuracy, label = 'Regularization Parameter  = 0.001')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.1, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_accuracy))
plt.plot(iterations, validation_accuracy, label = 'Regularization Parameter  = 0.1')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.5, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget)
iterations = range(len(validation_accuracy))
plt.plot(iterations, validation_accuracy, label = 'Regularization Parameter  = 0.5')
plt.ylabel('Validation Accuracy')
plt.xlabel('Epoch')
plt.title('Validation Accuracy of a Linear Regression Model vs Number of Ephochs')
plt.legend(loc='best')
plt.savefig('validationAcc_vs_epoch_.png')
plt.show()



weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.1, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget, "CE")
iterations = range(len(training_accuracy))
plt.plot(iterations, training_accuracy, label = 'Training Accuracy')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.1, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget, "CE")
iterations = range(len(validation_accuracy))
plt.plot(iterations, validation_accuracy, label = 'Validation Accuracy')
weight, bias, training_loss, validation_loss, test_loss, test_accuracy, validation_accuracy, training_accuracy = grad_descent(W,1,reshape_data_tensor(trainData), trainTarget, 0.005, 5000, 0.1, error_tol, reshape_data_tensor(validData), validTarget, reshape_data_tensor(testData), testTarget, "CE")
iterations = range(len(test_accuracy))
plt.plot(iterations, test_accuracy, label = 'Test Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.title('Accuracy of a Logistic Regression Model vs Number of Ephochs')
plt.legend(loc='best')
plt.savefig('2_2_Accuracy_vs_epoch_.png')
plt.show()